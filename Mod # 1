import streamlit as st
import yfinance as yf
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor

# --------- Zigzag Pivot Detector ----------
def zigzag_detector(prices, percent_threshold=0.035):
    pivots = []
    last_pivot = prices[0]
    last_pivot_index = 0
    uptrend = None

    for i in range(1, len(prices)):
        change = (prices[i] - last_pivot) / last_pivot
        if uptrend is None:
            uptrend = change > 0
        if uptrend and change <= -percent_threshold:
            pivots.append((last_pivot_index, last_pivot))
            last_pivot = prices[i]
            last_pivot_index = i
            uptrend = False
        elif not uptrend and change >= percent_threshold:
            pivots.append((last_pivot_index, last_pivot))
            last_pivot = prices[i]
            last_pivot_index = i
            uptrend = True
    pivots.append((last_pivot_index, last_pivot))
    return pivots

# --------- Feature Extraction ----------
def extract_wave_features(prices, pivots):
    waves = []
    for i in range(len(pivots) - 1):
        start_i, start_p = pivots[i]
        end_i, end_p = pivots[i + 1]
        duration = end_i - start_i
        percent_change = (end_p - start_p) / start_p
        slope = percent_change / duration if duration > 0 else 0
        volatility = np.std(prices[start_i:end_i + 1]) if duration > 0 else 0
        direction = 'Up' if percent_change > 0 else 'Down'
        waves.append({
            'Start_Index': start_i,
            'End_Index': end_i,
            'Percent_Change': percent_change,
            'Duration': duration,
            'Slope': slope,
            'Volatility': volatility,
            'Direction': direction
        })
    return pd.DataFrame(waves)

# --------- Rule-based Labeling ----------
def label_waves(waves_df):
    waves_df = waves_df.copy()
    labels = []
    for i in range(len(waves_df)):
        if i < 5:
            labels.append(f'Wave_{i+1}')
        else:
            labels.append('Unknown')
    waves_df['Label'] = labels
    return waves_df

# --------- Forecasting Prep ----------
def prepare_forecasting_data(labeled_waves_df):
    labeled_waves_df = labeled_waves_df.sort_values(by='Start_Index').reset_index(drop=True)
    samples = []
    for i in range(len(labeled_waves_df) - 4):
        seq = labeled_waves_df.iloc[i:i+5]
        features = {}
        for j in range(4):
            features[f'Wave_{j+1}_PC'] = seq.iloc[j]['Percent_Change']
            features[f'Wave_{j+1}_Duration'] = seq.iloc[j]['Duration']
            features[f'Wave_{j+1}_Slope'] = seq.iloc[j]['Slope']
            features[f'Wave_{j+1}_Volatility'] = seq.iloc[j]['Volatility']
            features[f'Wave_{j+1}_Direction'] = 1 if seq.iloc[j]['Direction'] == 'Up' else 0
        features['Next_Wave_Label'] = seq.iloc[4]['Label']
        features['Next_Price_Change'] = seq.iloc[4]['Percent_Change']
        samples.append(features)
    return pd.DataFrame(samples)

# --------- ML Models ----------
def train_models(forecasting_df):
    X = forecasting_df.drop(['Next_Wave_Label', 'Next_Price_Change'], axis=1)
    y_class = forecasting_df['Next_Wave_Label']
    y_reg = forecasting_df['Next_Price_Change']
    model_clf = RandomForestClassifier(n_estimators=100, random_state=42)
    model_clf.fit(X, y_class)
    model_reg = RandomForestRegressor(n_estimators=100, random_state=42)
    model_reg.fit(X, y_reg)
    return model_clf, model_reg

def forecast_next_wave(model_clf, model_reg, recent_features):
    X = pd.DataFrame([recent_features])
    pred_label = model_clf.predict(X)[0]
    pred_price_change = model_reg.predict(X)[0]
    return pred_label, pred_price_change

# --------- Streamlit UI ----------
st.set_page_config(page_title="Elliott Wave AI Forecaster", layout="wide")
st.title("Elliott Wave AI Forecaster")

ticker = st.text_input("Enter Ticker Symbol", "AAPL")
period = st.selectbox("Select Period", ["3mo", "6mo", "1y"], index=1)
interval = st.selectbox("Select Interval", ["1d", "1h"], index=0)

if st.button("Analyze"):

    data = yf.download(ticker, period=period, interval=interval)
    if data.empty:
        st.error("No data found for this ticker.")
    else:
        prices = data['Close'].fillna(method='ffill').values
        pivots = zigzag_detector(prices)
        waves_df = extract_wave_features(prices, pivots)
        labeled_waves = label_waves(waves_df)

        st.subheader("Detected Waves")
        st.dataframe(labeled_waves)

        forecasting_df = prepare_forecasting_data(labeled_waves)
        if forecasting_df.empty:
            st.warning("Not enough waves detected to forecast next wave.")
        else:
            model_clf, model_reg = train_models(forecasting_df)
            last_features = forecasting_df.drop(['Next_Wave_Label', 'Next_Price_Change'], axis=1).iloc[-1]
            pred_label, pred_price_change = forecast_next_wave(model_clf, model_reg, last_features)

            st.success(f"**Forecasted Next Wave:** {pred_label}")
            st.success(f"**Estimated Price Change:** {pred_price_change*100:.2f}%")

            # --------- Plotly Chart ---------
            fig = go.Figure()

            fig.add_trace(go.Scatter(
                x=list(range(len(prices))),
                y=prices,
                mode='lines',
                name='Close Price',
                line=dict(color='blue')
            ))

            for _, row in labeled_waves.iterrows():
                mid_idx = (row['Start_Index'] + row['End_Index']) // 2
                mid_price = prices[mid_idx]
                fig.add_trace(go.Scatter(
                    x=[mid_idx],
                    y=[mid_price],
                    mode='text',
                    text=[row['Label']],
                    textposition='top center',
                    showlegend=False
                ))

            last_price = prices[labeled_waves['End_Index'].iloc[-1]]
            target_price = last_price * (1 + pred_price_change)

            fig.add_shape(
                type="line",
                x0=len(prices) - 1,
                y0=last_price,
                x1=len(prices) + 5,
                y1=target_price,
                line=dict(color="green", dash="dash")
            )

            fig.update_layout(
                height=600,
                title=f"{ticker} - Elliott Wave Forecast",
                xaxis_title="Index",
                yaxis_title="Price",
                template="plotly_white"
            )

            st.plotly_chart(fig, use_container_width=True)